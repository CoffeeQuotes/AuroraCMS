<?php class Reader{public$hostname;public$user_name;public$password;public$save_attachments;public$retry;public$imap;public$email_index;public$emails=array();public$email_count;public$modes=array();public$id=0;public$limit=0;public$page=0;public$offset=0;public$order='DESC';public$mailbox='INBOX';public function __construct($hostname,$user_name,$password,$attachment_dir=false,$mark_as_read=true){$this->hostname=$hostname;$this->user_name=$user_name;$this->password=$password;$this->encoding='UTF-8';$this->retry=0;$this->mark_as_read=$mark_as_read;$this->save_attachments=false;if($attachment_dir){if(!is_dir($attachment_dir)){throw new Exception('ERROR: Directory "'.$attachment_dir.'" could not be found.');}if(!is_writable($attachment_dir)){throw new Exception('ERROR: Directory "'.$attachment_dir.'" is not writable.');}$this->save_attachments=true;$this->attachment_dir=$attachment_dir;}return true;}public function stream($reconnect=true){if($this->imap &&(!is_resource($this->imap)||!imap_ping($this->imap))){$this->close();$this->imap=false;}if(!$this->imap &&$reconnect){$this->imap=$this->connect();}return$this->imap;}public function connect(){$stream=imap_open($this->hostname.$this->mailbox,$this->user_name,$this->password,false,$this->retry);if(!$stream){$last_error=imap_last_error();imap_errors();throw new Exception('ERROR: Could Not Connect ('.$last_error.')');}return$stream;}public function close(){if($this->stream(false) && is_resource($this->stream(false))){imap_close($this->stream(false),CL_EXPUNGE);}return$this;}public function __destruct(){return $this->close();}public function getError(){return imap_last_error();}public function deleteEmail($email_id){return imap_delete($this->stream(),$email_id,FT_UID);}public function markAsRead($email_id){return imap_setflag_full($this->stream(),$email_id,'\\Seen',ST_UID);}public function moveEmailToFolder($email_id,$folder){if($this->mailbox==$folder){return false;}return imap_mail_move($this->stream(),(string)$email_id,$folder,CP_UID);}public function emails(){return$this->emails;}public function email(){return$this->emails && isset($this->emails[0])?$this->emails[0]:null;}public function id($id){$this->id=(int)$id;return$this;}public function all(){$this->modes[]='ALL';return$this;}public function flagged(){$this->modes[]='FLAGGED';return$this;}public function unanswered(){$this->modes[]='UNANSWERED';return$this;}public function deleted(){$this->modes[]='DELETED';return$this;}public function unseen(){$this->modes[]='UNSEEN';return$this;}public function unread(){return$this->unseen();}public function from($from){$this->modes[]='FROM "'.$from.'"';return $this;}public function searchBody($string){if($string){$this->modes[]='BODY "'.$string.'"';}return$this;}public function searchSubject($string){if($string){$this->modes[]='SUBJECT "'.$string.'"';}return$this;}public function recent(){$this->modes[]='RECENT';return$this;}public function unflagged(){$this->modes[]='UNFLAGGED';return$this;}public function seen(){$this->modes[]='SEEN';return$this;}public function read(){$this->seen();}public function newMessages(){$this->modes[]='NEW';return$this;}public function oldMessages(){$this->modes[]='OLD';return$this;}public function keyword($keyword){$this->modes[]='KEYWORD "'.$keyword.'"';return$this;}public function unkeyword($keyword){$this->modes[]='UNKEYWORD "'.$keyword.'"';return$this;}public function beforeDate($date){$date=date('d-M-Y', strtotime($date));$this->modes[]='BEFORE "'.$date.'"';return$this;}public function sinceDate($date){$date=date('d-M-Y',strtotime($date));$this->modes[]='SINCE "'.$date.'"';return$this;}public function sentTo($to){$this->modes[]='TO "'.$to.'"';return$this;}public function searchBCC($to){$this->modes[]='BCC "'.$to.'"';return$this;}public function searchCC($to){$this->modes[]='CC "'.$to.'"';return$this;}public function onDate($date){$date=date('d-M-Y',strtotime($date));$this->modes[]='ON "'.$date.'"';return$this;}public function searchText($string){$this->modes[]='TEXT "'.$string.'"';return$this;}public function limit($limit){$this->limit=(int)$limit;return$this;}public function page($page){$this->page=$page;$this->offset=($page-1)*$this->limit;return$this;}public function orderASC(){$this->order='ASC';return$this;}public function orderDESC(){$this->order='DESC';return$this;}public function folder($folder){return$this->mailbox($folder);}public function mailbox($mailbox){$this->mailbox=$mailbox;return$this;}public function modes(){if(!$this->modes){$this->modes[]='ALL';}return implode(' ',$this->modes);}public function get(){if(!$this->connect()){throw new Exception('ERROR: Could not connect.');}if($this->id){$this->emails=array();$this->emails[]=$this->getEmail($this->id);return$this->emails;}$this->emails=array();$this->email_index=imap_search($this->stream(),$this->modes(),false,$this->encoding);$this->email_count=imap_num_msg($this->stream());if(!$this->limit){$this->limit=count($this->email_index);}if($this->email_index){if($this->order=='DESC'){rsort($this->email_index);}else{sort($this->email_index);}if($this->limit||($this->limit &&$this->offset)){$this->email_index=array_slice($this->email_index,$this->offset,$this->limit);}$this->emails=array();foreach($this->email_index as$id){$this->emails[]=$this->getEmailByMessageSequence($id);if($this->mark_as_read){$this->markAsRead($id);}}}return$this->emails;}public function getEmailByUID($uid){return$this->getEmail($uid);}public function getEmailByMessageSequence($id){$uid=imap_uid($this->stream(),$id);return$this->getEmail($uid);}public function getEmail($uid){$email=new Email();$header_from_body=imap_fetchbody($this->stream(),$uid,'0',FT_UID);$header=imap_rfc822_parse_headers($header_from_body);if(!$header){return null;}$email->setid($uid);$email->setSize(isset($header->Size)?$header->Size:0);$header->subject=isset($header->subject)?$this->decodeMimeHeader($header->subject):false;$email->setSubject($header->subject);$email->setDate(isset($header->date)?$header->date:null);$email->setUdate(isset($header->udate)?$header->udate:null);if(isset($header->to)){foreach($header->to as$to){$to_name=isset($to->personal)?$this->decodeMimeHeader($to->personal):false;$email->addTo($to->mailbox,$to->host,$to_name);}}if(isset($header->from)){$from_name=isset($header->from[0]->personal)?$this->decodeMimeHeader($header->from[0]->personal):false;$email->setFrom($header->from[0]->mailbox,$header->from[0]->host,$from_name);}if(isset($header->reply_to)){foreach($header->reply_to as$reply_to){$reply_to_name=isset($reply_to->personal)?$this->decodeMimeHeader($reply_to->personal):false;$email->addReplyTo($reply_to->mailbox,$reply_to->host,$reply_to_name);}}if(isset($header->cc)){foreach($header->cc as$cc){$cc_name=isset($cc->personal)?$this->decodeMimeHeader($cc->personal):false;$email->addCC($cc->mailbox,$cc->host,$cc_name);}}$recent=isset($header->Recent)&&($header->Recent=='R'||$header->Recent=='N')?true:false;$email->setRecent($recent);$unseen=isset($header->Unseen)&&$header->Unseen=='U'?true:false;$email->setUnseen($unseen);$flagged=isset($header->Flagged)&&$header->Flagged=='F'?true:false;$email->setFlagged($flagged);$answered=isset($header->Answered)&&$header->Answered=='A'?true:false;$email->setAnswered($answered);$deleted=isset($header->Deleted)&&$header->Deleted=='D'?true:false;$email->setDeleted($deleted);$draft=isset($header->Draft)&&$header->Draft=='X'?true:false;$email->setDraft($draft);$body=imap_fetchstructure($this->stream(),$uid,FT_UID);if(isset($body->parts)&&count($body->parts)){foreach($body->parts as$part_number=>$part){$this->decodePart($email,$part,$part_number+1);}}else{$this->decodePart($email,$body);}return$email;}public function decodePart(Email $email,$part,$part_number=false){$options=($this->mark_as_read)?FT_UID:FT_UID|FT_PEEK;if($part_number){$data=imap_fetchbody($this->stream(),$email->id(),$part_number,$options);}else{$data=imap_body($this->stream(),$email->id(),$options);}switch($part->encoding){case 1:$data=imap_utf8($data);break;case 2:$data=imap_binary($data);break;case 3:$data=imap_base64($data);break;case 4:$data=quoted_printable_decode($data);break;}$params=array();if(isset($part->parameters)){foreach($part->parameters as$param){$params[strtolower($param->attribute)]=$param->value;}}if(isset($part->dparameters)){foreach($part->dparameters as$param){$params[strtolower($param->attribute)]=$param->value;}}$attachment_id=false;$is_attachment=false;if(isset($part->disposition)&&in_array(strtolower($part->disposition),array('attachment','inline'))&&$part->subtype!='PLAIN'){$is_attachment=true;$attachment_type=strtolower($part->disposition);if($attachment_type=='inline'){$is_inline_attachment=true;$attachment_id=isset($part->id)?trim($part->id," <>"):false;}else{$is_inline_attachment=false;$attachment_id=$email->id();}}if($is_attachment){$file_name=false;if(isset($params['filename'])){$file_name=$params['filename'];}elseif(isset($params['name'])){$file_name=$params['name'];}if($file_name){$file_name=$attachment_id.'-'.$file_name;$attachment=new EmailAttachment();$attachment->setId($attachment_id);$attachment->setName($file_name);if($is_inline_attachment){$attachment->setType('inline');}else{$attachment->setType('attachment');}if($this->save_attachments){$attachment->setFilePath($this->attachment_dir.DIRECTORY_SEPARATOR.$attachment->name());if($this->attachment_dir &&$attachment->filePath()){if(!file_exists($attachment->filePath())){file_put_contents($attachment->filePath(),$data);}}}else{}$email->addAttachment($attachment);}}else{if(!empty($params['charset'])){$data=$this->convertEncoding($data,$params['charset']);}if(isset($part->type)){if($part->type==0){if(strtoupper($part->subtype)=='PLAIN'){$email->setPlain($data);}else{$email->setHTML($data);}}elseif($part->type==2){$email->setPlain($data);}}}if(!empty($part->parts)){foreach($part->parts as$subpart_number=>$subpart){if($part->type==2&&$part->subtype=='RFC822'){$this->decodePart($email,$subpart,$part_number);}else{$this->decodePart($email,$subpart,$part_number.'.'.($subpart_number+1));}}}return trim($data);}public function decodeMimeHeader($encoded_header){$decoded_header='';$elements=imap_mime_header_decode($encoded_header);for($i=0;$i<count($elements);$i++){if($elements[$i]->charset=='default'){$elements[$i]->charset='iso-8859-1';}$decoded_header.=$this->convertEncoding($elements[$i]->text,$elements[$i]->charset);}return$decoded_header;}public function convertEncoding($string,$current_encoding_type){$converted_string=false;if(!$string){return$string;}if($current_encoding_type==$this->encoding){return$string;}if(extension_loaded('mbstring')){$converted_string=@mb_convert_encoding($string,$this->encoding,$current_encoding_type);}else{$converted_string=@iconv($current_encoding_type,$this->encoding.'//IGNORE',$string);}return$converted_string?:$string;}}
